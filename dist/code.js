(()=>{"use strict";function e(e){const t=Math.round(255*e.r).toString(16).padStart(2,"0"),n=Math.round(255*e.g).toString(16).padStart(2,"0"),r=Math.round(255*e.b).toString(16).padStart(2,"0");return"a"in e&&void 0!==e.a&&1!==e.a?`#${t}${n}${r}${Math.round(255*e.a).toString(16).padStart(2,"0")}`:`#${t}${n}${r}`}function t(e,t){switch(e){case"COLOR":return"color";case"FLOAT":return"number"==typeof t?"number":"string"==typeof t&&(t.endsWith("px")||t.endsWith("rem")||t.endsWith("em")||t.endsWith("%"))?"dimension":"number";case"STRING":return"string";case"BOOLEAN":return"boolean";default:return"number"==typeof t?"number":"string"==typeof t?t.startsWith("#")||t.startsWith("rgb")?"color":t.match(/\d+(\.\d+)?(px|rem|em|%)/)?"dimension":t.startsWith("{")&&t.endsWith("}")?"reference":"string":"boolean"==typeof t?"boolean":"string"}}function n(e,t,n=""){const r={$value:e,$type:t};return n&&(r.$description=n),r}function r({r:e,g:t,b:n,a:r=1}){const o=Math.round(255*e),s=Math.round(255*t),a=Math.round(255*n);return void 0!==r&&r<1?`rgba(${o}, ${s}, ${a}, ${r.toFixed(2)})`:`rgb(${o}, ${s}, ${a})`}function o({r:e,g:t,b:n,a:r=1}){var o;const s=function({r:e,g:t,b:n,a:r=1}){const o=Math.max(e,t,n),s=Math.min(e,t,n),a=o-s;let i=0,l=0,c=(o+s)/2;if(0!==a)switch(l=c>.5?a/(2-o-s):a/(o+s),o){case e:i=60*((t-n)/a+(t<n?6:0));break;case t:i=60*((n-e)/a+2);break;case n:i=60*((e-t)/a+4)}return{h:i,s:100*l,l:100*c,a:r}}({r:e,g:t,b:n,a:r});return void 0!==r&&r<1?`hsla(${Math.round(s.h)}deg, ${Math.round(s.s)}%, ${Math.round(s.l)}%, ${null===(o=s.a)||void 0===o?void 0:o.toFixed(2)})`:`hsl(${Math.round(s.h)}deg, ${Math.round(s.s)}%, ${Math.round(s.l)}%)`}function s(e,t,n=new Set){if(!e||"string"!=typeof e)return{value:e,type:"unknown",isResolved:!1};if(!e.startsWith("{")||!e.endsWith("}"))return{value:e,type:"unknown",isResolved:!1};const r=e.substring(1,e.length-1);if(n.has(r))return console.warn(`Circular reference detected: ${r}`),{value:e,type:"reference",originalReference:e,isResolved:!1};if(n.add(r),t[r]){const o=t[r];if("string"==typeof o.value&&o.value.startsWith("{")&&o.value.endsWith("}")){const a=s(o.value,t,n);return Object.assign(Object.assign({},a),{originalReference:e,originalPath:o.originalPath,resolvedFrom:r})}return{value:o.value,type:o.type,originalReference:e,originalPath:o.originalPath,isResolved:!0,resolvedFrom:r}}const o=r.includes("/")?r.replace(/\//g,"."):r.replace(/\./g,"/");if(t[o]){const r=t[o];if("string"==typeof r.value&&r.value.startsWith("{")&&r.value.endsWith("}")){const a=s(r.value,t,n);return Object.assign(Object.assign({},a),{originalReference:e,originalPath:r.originalPath,resolvedFrom:o})}return{value:r.value,type:r.type,originalReference:e,originalPath:r.originalPath,isResolved:!0,resolvedFrom:o}}const a=r.split(/[\/\.]/).pop()||"";if(a!==r&&t[a]){const r=t[a];if("string"==typeof r.value&&r.value.startsWith("{")&&r.value.endsWith("}")){const o=s(r.value,t,n);return Object.assign(Object.assign({},o),{originalReference:e,originalPath:r.originalPath,resolvedFrom:a})}return{value:r.value,type:r.type,originalReference:e,originalPath:r.originalPath,isResolved:!0,resolvedFrom:a}}const i=function(e,t){const n=Object.keys(t);let r=null,o=0;const s=e.toLowerCase();for(const e of n){const t=e.toLowerCase();if(t.endsWith(s)){const n=s.length/t.length;n>o&&(r=e,o=n)}else{const n=s.split(/[\/\.]/),a=t.split(/[\/\.]/);if(n[n.length-1]===a[a.length-1]){const t=.5;t>o&&(r=e,o=t)}}}return r}(r,t);if(i){const r=t[i];if("string"==typeof r.value&&r.value.startsWith("{")&&r.value.endsWith("}")){const o=s(r.value,t,n);return Object.assign(Object.assign({},o),{originalReference:e,originalPath:r.originalPath,resolvedFrom:i})}return{value:r.value,type:r.type,originalReference:e,originalPath:r.originalPath,isResolved:!0,resolvedFrom:i}}return{value:e,type:"reference",originalReference:e,isResolved:!1}}function a(t,n,r,o){if(null==t)return null;if("object"==typeof t&&("VARIABLE_ALIAS"===t.type||"VARIABLE_REFERENCE"===t.type))return function(e,t,n){if(!e||"object"!=typeof e)return e;if(("VARIABLE_ALIAS"===e.type||"VARIABLE_REFERENCE"===e.type)&&e.id){const r=t.find((t=>t.id===e.id));if(r){const t=r.name.replace(/\//g,".");return e.id&&t&&n.set(e.id,t),`{${t}}`}}return e}(t,r,o);if("object"==typeof t&&"r"in t&&"g"in t&&"b"in t)return e(t);if(Array.isArray(t))return t.map((e=>a(e,n,r,o)));if("object"==typeof t&&null!==t){if(0===Object.keys(t).length)return"{}";const e={};for(const s in t)e[s]=a(t[s],n,r,o);return e}return t}function i(){return e=this,r=void 0,i=function*(){try{console.log("Starting DTCG-compliant variable extraction");const e=yield figma.variables.getLocalVariableCollections();console.log("Collections found:",e.length);const r=figma.variables.getLocalVariables(),o=new Map,i={};for(const s of e){const e=s.name.toLowerCase();console.log("Processing collection:",e),i[e]={};const l=r.filter((e=>e.variableCollectionId===s.id));console.log(`Found ${l.length} variables in collection ${e}`);for(const c of s.modes){const s=c.name;console.log(`Processing mode: ${s}`),i[e][s]={};for(const u of l){const l=u.valuesByMode[c.modeId];if(void 0===l)continue;const f=u.name.split("/").filter((e=>e.trim().length>0)),g=f.length>0?f:["base"],d=a(l,u.resolvedType,r,o),p=n(d,t(u.resolvedType,d),"");let h=i[e][s];for(let e=0;e<g.length-1;e++){const t=g[e];h[t]||(h[t]={}),h=h[t]}h[g[g.length-1]]=p}}}console.log("Validating references...");const l=function(e,t){const n=JSON.parse(JSON.stringify(e)),r={};if(t instanceof Map)for(const[e,n]of t.entries())r[n]={value:`{${n}}`,type:"reference"};else Object.assign(r,t);function o(e,t=""){if(e&&"object"==typeof e)if(Array.isArray(e))e.forEach(((e,n)=>o(e,`${t}[${n}]`)));else for(const n in e){const a=e[n],i=t?`${t}.${n}`:n;if(!n.startsWith("$")||"$value"===n)if("$value"===n&&"string"==typeof a&&a.startsWith("{")&&a.endsWith("}")){a.substring(1,a.length-1);const t=s(a,r);t.isResolved?(e.$originalValue=a,e.$value=t.value,e.$resolvedFrom=t.resolvedFrom,"reference"===e.$type&&t.type?e.$type=t.type:e.$type||(e.$type=t.type||"reference")):e.$type||(e.$type="reference")}else"object"==typeof a&&null!==a&&o(a,i)}}0===Object.keys(r).length&&Object.assign(r,function(e){const t={};function n(e,r="",o=""){if(e&&"object"==typeof e)if(void 0===e.$value||void 0===e.$type)for(const t in e){const s=r?`${r}/${t}`:t,a=o?`${o}.${t}`:t;"object"==typeof e[t]&&null!==e[t]&&n(e[t],s,a)}else{const n=r.replace(/\//g,".");t[n]={value:e.$value,type:e.$type,originalPath:o},t[r]={value:e.$value,type:e.$type,originalPath:o};const s=n.split(".");for(let a=s.length;a>0;a--){const i=s.slice(s.length-a).join(".");t[i]||i===n||(t[i]={value:e.$value,type:e.$type,originalPath:o});const l=s.slice(s.length-a).join("/");t[l]||l===r||(t[l]={value:e.$value,type:e.$type,originalPath:o})}const a=s[s.length-1];t[a]||(t[a]={value:e.$value,type:e.$type,originalPath:o})}}for(const t in e)for(const r in e[t])n(e[t][r],`${t}/${r}`,`${t}.${r}`),n(e[t][r],"","");return t}(e));for(const e in n)for(const t in n[e])o(n[e][t],`${e}.${t}`);return n}(i,o);return console.log("DTCG-compliant extraction finished"),l}catch(e){throw console.error("Error in extractDTCGVariables:",e),e}},new((o=void 0)||(o=Promise))((function(t,n){function s(e){try{l(i.next(e))}catch(e){n(e)}}function a(e){try{l(i.throw(e))}catch(e){n(e)}}function l(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(s,a)}l((i=i.apply(e,r||[])).next())}));var e,r,o,i}var l=function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function i(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}l((r=r.apply(e,t||[])).next())}))};function c(e,t,n,r){return l(this,arguments,void 0,(function*(e,t,n,r,o=""){for(const s in t){const a=t[s],i=o?`${o}/${s}`:s;if(a&&"object"==typeof a&&void 0!==a.$value){const t=i,r=e.find((e=>e.name===t));if(r)try{const e=u(a.$value,a.$type);yield r.setValueForMode(n,e),console.log(`Updated variable: ${t}`)}catch(e){console.error(`Error updating variable ${t}:`,e)}else console.warn(`Variable not found: ${t}`)}else a&&"object"==typeof a&&!Array.isArray(a)&&(yield c(e,a,n,r,i))}}))}function u(e,t){switch(t){case"color":return null==(n=e)?{r:0,g:0,b:0,a:1}:"object"==typeof n&&null!==n&&"r"in n?n:"string"==typeof n&&n.startsWith("#")?function(e){3===(e=e.replace("#","")).length&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]);let t=1;return 8===e.length&&(t=parseInt(e.slice(6,8),16)/255,e=e.substring(0,6)),{r:parseInt(e.slice(0,2),16)/255,g:parseInt(e.slice(2,4),16)/255,b:parseInt(e.slice(4,6),16)/255,a:t}}(n):"string"==typeof n&&(n.startsWith("rgb(")||n.startsWith("rgba("))?function(e){const t=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d*\.?\d+))?\)/);return t?{r:parseInt(t[1],10)/255,g:parseInt(t[2],10)/255,b:parseInt(t[3],10)/255,a:void 0!==t[4]?parseFloat(t[4]):1}:{r:0,g:0,b:0,a:1}}(n):{r:0,g:0,b:0,a:1};case"number":return"string"==typeof e?parseFloat(e):e;case"boolean":return Boolean(e);case"reference":return"string"==typeof e&&e.startsWith("{")&&e.endsWith("}"),e;default:return e}var n}let f=!0,g="hex",d=null;figma.showUI(__html__,{width:1080,height:800}),console.log("Plugin UI shown with updated dimensions"),figma.ui.onmessage=t=>{return n=void 0,s=void 0,u=function*(){if(console.log("Plugin received message from UI:",t.type),"ui-ready"===t.type){if(console.log("UI is ready, sending data"),f){f=!1;try{const e=yield i();d=JSON.parse(JSON.stringify(e)),console.log("Extracted DTCG-compliant tokens, sending to UI"),figma.ui.postMessage({type:"tokens-data",data:e})}catch(e){console.error("Error extracting tokens:",e),figma.ui.postMessage({type:"error",message:`Error extracting tokens: ${e instanceof Error?e.message:"Unknown error"}`})}}}else if("extract-tokens"===t.type)try{const e=yield i();d=JSON.parse(JSON.stringify(e)),console.log("Extracted tokens on demand, sending to UI"),figma.ui.postMessage({type:"tokens-data",data:e})}catch(e){console.error("Error extracting tokens:",e),figma.ui.postMessage({type:"error",message:`Error extracting tokens: ${e instanceof Error?e.message:"Unknown error"}`})}else if("apply-color-format"===t.type){if(t.colorFormat){g=t.colorFormat,console.log(`Color format set to: ${g}`);try{d||(d=yield i());const t=function(t,n){const s=JSON.parse(JSON.stringify(t));function a(t){if(t&&"object"==typeof t&&void 0!==t.$value){if("color"===t.$type){if("string"==typeof t.$value&&t.$value.startsWith("{")&&t.$value.endsWith("}"))return t;t.$value=function(t,n){if("string"==typeof t){if(t.startsWith("#")){const e=function(e){3===(e=e.replace("#","")).length&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]);let t=1;8===e.length&&(t=parseInt(e.slice(6,8),16)/255,e=e.substring(0,6));const n=parseInt(e,16);return{r:(n>>16&255)/255,g:(n>>8&255)/255,b:(255&n)/255,a:t}}(t);switch(n){case"hex":return t;case"rgb":case"rgba":return r(e);case"hsl":case"hsla":return o(e)}}return t}if("object"==typeof t&&"r"in t&&"g"in t&&"b"in t)switch(n){case"hex":default:return e(t);case"rgb":case"rgba":return r(t);case"hsl":case"hsla":return o(t)}return t}(t.$value,n)}return t}if(t&&"object"==typeof t&&!Array.isArray(t))for(const e in t)t[e]=a(t[e]);return t}for(const e in s)for(const t in s[e])s[e][t]=a(s[e][t]);return s}(JSON.parse(JSON.stringify(d)),g);figma.ui.postMessage({type:"tokens-data",data:t})}catch(e){console.error("Error applying color format:",e),figma.ui.postMessage({type:"error",message:`Error applying color format: ${e instanceof Error?e.message:"Unknown error"}`})}}}else if("update-variables"===t.type)try{console.log("Received update variables request");const e=yield function(e){return l(this,void 0,void 0,(function*(){try{if(console.log("Starting variable update process"),!e||"object"!=typeof e)return{success:!1,error:"Invalid JSON data provided"};const t=yield figma.variables.getLocalVariableCollections();for(const n in e){console.log(`Processing collection: ${n}`);const r=t.find((e=>e.name.toLowerCase()===n.toLowerCase()));if(!r){console.warn(`Collection not found: ${n}`);continue}const o=figma.variables.getLocalVariables().filter((e=>e.variableCollectionId===r.id)),s=e[n];for(const e in s){console.log(`Processing mode: ${e}`);const t=r.modes.find((t=>t.name.toLowerCase()===e.toLowerCase()));if(!t){console.warn(`Mode not found: ${e} in collection ${n}`);continue}const a=s[e];yield c(o,a,t.modeId,`${n}.${e}`)}}return console.log("Variable update completed successfully"),{success:!0}}catch(e){return console.error("Error updating variables:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error updating variables"}}}))}(t.data);figma.ui.postMessage({type:"update-variables-result",success:e.success,error:e.error})}catch(e){console.error("Error handling variable update:",e),figma.ui.postMessage({type:"update-variables-result",success:!1,error:`Error handling variable update: ${e instanceof Error?e.message:"Unknown error"}`})}else"close"===t.type&&figma.closePlugin()},new((a=void 0)||(a=Promise))((function(e,t){function r(e){try{i(u.next(e))}catch(e){t(e)}}function o(e){try{i(u.throw(e))}catch(e){t(e)}}function i(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,o)}i((u=u.apply(n,s||[])).next())}));var n,s,a,u}})();
(()=>{"use strict";function t(t,e){switch(t){case"COLOR":return"color";case"FLOAT":return"number"==typeof e?"number":"string"==typeof e&&(e.endsWith("px")||e.endsWith("rem")||e.endsWith("em")||e.endsWith("%"))?"dimension":"number";case"STRING":return"string";case"BOOLEAN":return"boolean";default:return"number"==typeof e?"number":"string"==typeof e?e.startsWith("#")||e.startsWith("rgb")?"color":e.match(/\d+(\.\d+)?(px|rem|em|%)/)?"dimension":e.startsWith("{")&&e.endsWith("}")?"reference":"string":"boolean"==typeof e?"boolean":"string"}}function e(t,e,n=""){const o={$value:t,$type:e};return n&&(o.$description=n),o}function n(t,e,o,r){if(null==t)return null;if("object"==typeof t&&("VARIABLE_ALIAS"===t.type||"VARIABLE_REFERENCE"===t.type))return function(t,e,n){if(!t||"object"!=typeof t)return t;if(("VARIABLE_ALIAS"===t.type||"VARIABLE_REFERENCE"===t.type)&&t.id){const o=e.find((e=>e.id===t.id));if(o){const e=o.name.replace(/\//g,".");return t.id&&e&&n.set(t.id,e),`{${e}}`}}return t}(t,o,r);if("object"==typeof t&&"r"in t&&"g"in t&&"b"in t)return function(t){const e=Math.round(255*t.r).toString(16).padStart(2,"0"),n=Math.round(255*t.g).toString(16).padStart(2,"0"),o=Math.round(255*t.b).toString(16).padStart(2,"0");return"a"in t&&void 0!==t.a&&1!==t.a?`#${e}${n}${o}${Math.round(255*t.a).toString(16).padStart(2,"0")}`:`#${e}${n}${o}`}(t);if(Array.isArray(t))return t.map((t=>n(t,e,o,r)));if("object"==typeof t&&null!==t){if(0===Object.keys(t).length)return"{}";const i={};for(const s in t)i[s]=n(t[s],e,o,r);return i}return t}function o(){return o=this,r=void 0,s=function*(){try{console.log("Starting DTCG-compliant variable extraction");const o=yield figma.variables.getLocalVariableCollections();console.log("Collections found:",o.length);const r=figma.variables.getLocalVariables(),i=new Map,s={};for(const a of o){const o=a.name.toLowerCase();console.log("Processing collection:",o),s[o]={};const c=r.filter((t=>t.variableCollectionId===a.id));console.log(`Found ${c.length} variables in collection ${o}`);for(const l of a.modes){const a=l.name;console.log(`Processing mode: ${a}`),s[o][a]={};for(const f of c){const c=f.valuesByMode[l.modeId];if(void 0===c)continue;const u=f.name.split("/").filter((t=>t.trim().length>0)),g=u.length>0?u:["base"],d=n(c,f.resolvedType,r,i),p=e(d,t(f.resolvedType,d),"");let h=s[o][a];for(let t=0;t<g.length-1;t++){const e=g[t];h[e]||(h[e]={}),h=h[e]}h[g[g.length-1]]=p}}}console.log("Validating references...");const a=function(t,e){const n=JSON.parse(JSON.stringify(t));function o(t,e){const n=e.split(".");let o=t;for(const t of n){if(!o[t])return!1;o=o[t]}return!0}return function t(r){if(r&&"object"==typeof r)if(Array.isArray(r))r.forEach((e=>t(e)));else for(const i in r){const s=r[i];if(!i.startsWith("$")||"$value"===i)if("$value"===i&&"string"==typeof s&&s.startsWith("{")&&s.endsWith("}")){const t=s.substring(1,s.length-1);if(!o(n,t)){console.warn(`Reference not found: ${t}`);for(const[n,o]of e.entries())if(o.endsWith(t)||t.endsWith(o)){const t=`{${o}}`;console.log(`Replacing ${s} with ${t}`),r[i]=t;break}}void 0===r.$type&&(r.$type="reference")}else"object"==typeof s&&null!==s&&t(s)}}(n),n}(s,i);return console.log("DTCG-compliant extraction finished"),a}catch(t){throw console.error("Error in extractDTCGVariables:",t),t}},new((i=void 0)||(i=Promise))((function(t,e){function n(t){try{c(s.next(t))}catch(t){e(t)}}function a(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var o;e.done?t(e.value):(o=e.value,o instanceof i?o:new i((function(t){t(o)}))).then(n,a)}c((s=s.apply(o,r||[])).next())}));var o,r,i,s}function r({r:t,g:e,b:n,a:o=1}){const r=Math.round(255*t),i=Math.round(255*e),s=Math.round(255*n);return void 0!==o&&o<1?`rgba(${r}, ${i}, ${s}, ${o.toFixed(2)})`:`rgb(${r}, ${i}, ${s})`}function i({r:t,g:e,b:n,a:o=1}){var r;const i=function({r:t,g:e,b:n,a:o=1}){const r=Math.max(t,e,n),i=Math.min(t,e,n),s=r-i;let a=0,c=0,l=(r+i)/2;if(0!==s)switch(c=l>.5?s/(2-r-i):s/(r+i),r){case t:a=60*((e-n)/s+(e<n?6:0));break;case e:a=60*((n-t)/s+2);break;case n:a=60*((t-e)/s+4)}return{h:a,s:100*c,l:100*l,a:o}}({r:t,g:e,b:n,a:o});return void 0!==o&&o<1?`hsla(${Math.round(i.h)}deg, ${Math.round(i.s)}%, ${Math.round(i.l)}%, ${null===(r=i.a)||void 0===r?void 0:r.toFixed(2)})`:`hsl(${Math.round(i.h)}deg, ${Math.round(i.s)}%, ${Math.round(i.l)}%)`}function s(t,e){if("string"==typeof t){if(t.startsWith("#")){const n=function(t){3===(t=t.replace("#","")).length&&(t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]);let e=1;8===t.length&&(e=parseInt(t.slice(6,8),16)/255,t=t.substring(0,6));const n=parseInt(t,16);return{r:(n>>16&255)/255,g:(n>>8&255)/255,b:(255&n)/255,a:e}}(t);switch(e){case"hex":return t;case"rgb":case"rgba":return r(n);case"hsl":case"hsla":return i(n)}}return t}if("object"==typeof t&&"r"in t&&"g"in t&&"b"in t)switch(e){case"hex":default:return function({r:t,g:e,b:n,a:o=1}){const r=Math.round(255*t).toString(16).padStart(2,"0"),i=Math.round(255*e).toString(16).padStart(2,"0"),s=Math.round(255*n).toString(16).padStart(2,"0");return void 0!==o&&o<1?`#${r}${i}${s}${Math.round(255*o).toString(16).padStart(2,"0")}`:`#${r}${i}${s}`}(t);case"rgb":case"rgba":return r(t);case"hsl":case"hsla":return i(t)}return t}let a=!0,c="hex",l=null;figma.showUI(__html__,{width:950,height:800}),console.log("Plugin UI shown with updated dimensions"),figma.ui.onmessage=t=>{return e=void 0,n=void 0,i=function*(){if(console.log("Plugin received message from UI:",t.type),"ui-ready"===t.type){if(console.log("UI is ready, sending data"),a){a=!1;try{const t=yield o();l=JSON.parse(JSON.stringify(t)),console.log("Extracted DTCG-compliant tokens, sending to UI"),figma.ui.postMessage({type:"tokens-data",data:t})}catch(t){console.error("Error extracting tokens:",t),figma.ui.postMessage({type:"error",message:`Error extracting tokens: ${t instanceof Error?t.message:"Unknown error"}`})}}}else if("extract-tokens"===t.type)try{const t=yield o();l=JSON.parse(JSON.stringify(t)),console.log("Extracted tokens on demand, sending to UI"),figma.ui.postMessage({type:"tokens-data",data:t})}catch(t){console.error("Error extracting tokens:",t),figma.ui.postMessage({type:"error",message:`Error extracting tokens: ${t instanceof Error?t.message:"Unknown error"}`})}else if("apply-color-format"===t.type){if(t.colorFormat){c=t.colorFormat,console.log(`Color format set to: ${c}`);try{l||(l=yield o());const t=function(t,e){const n=JSON.parse(JSON.stringify(t)),o=new Map;function r(t,e=""){if(t&&"object"==typeof t)if(void 0===t.$value||void 0===t.$type){if(!Array.isArray(t))for(const n in t){const o=e?`${e}.${n}`:n;r(t[n],o)}}else o.set(e,{value:t.$value,type:t.$type})}function i(t){if(t&&"object"==typeof t&&void 0!==t.$value){if("color"===t.$type){if("string"==typeof t.$value&&t.$value.startsWith("{")&&t.$value.endsWith("}"))return t;t.$value=s(t.$value,e)}return t}if(t&&"object"==typeof t&&!Array.isArray(t))for(const e in t)t[e]=i(t[e]);return t}for(const t in n)for(const e in n[t])r(n[t][e],`${t}.${e}`);for(const t in n)for(const e in n[t])n[t][e]=i(n[t][e]);return n}(JSON.parse(JSON.stringify(l)),c);figma.ui.postMessage({type:"tokens-data",data:t})}catch(t){console.error("Error applying color format:",t),figma.ui.postMessage({type:"error",message:`Error applying color format: ${t instanceof Error?t.message:"Unknown error"}`})}}}else"close"===t.type&&figma.closePlugin()},new((r=void 0)||(r=Promise))((function(t,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(s,a)}c((i=i.apply(e,n||[])).next())}));var e,n,r,i}})();